{"meta":{"title":"Lee-creator的BLOG","subtitle":"学习类blog","description":"专注于分享新学习的知识","author":"Lee","url":"http://Lee-creator.github.io","root":"/"},"pages":[],"posts":[{"title":"IntelliJ-IDEA的快捷键","slug":"IntelliJ-IDEA的快捷键","date":"2020-06-15T06:29:54.074Z","updated":"2020-06-15T07:44:51.820Z","comments":true,"path":"2020/06/15/IntelliJ-IDEA的快捷键/","link":"","permalink":"http://lee-creator.github.io/2020/06/15/IntelliJ-IDEA%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"最近安装了IDEA,稍微学习一下IDEA的快捷键(shortcut).","text":"最近安装了IDEA,稍微学习一下IDEA的快捷键(shortcut). Ctrl ctrl+F 在当前文件进行文本查找 ctrl+R 在当前文件进行文本替换 ctrl+Z 撤销 ctrl+Y 删除光标所在行货删除所选中的行 ctrl+D 复制光标所在行或 复制所选内容 并把复制内容插入光标位置下面 ctrl+E 显示最近打开的文件记录列表 ctrl+N 输入类名查找类文件 ctrl+P 显示方法参数提示 ctrl+U 前往当前光标所在方法的父类方法/接口定义 ctrl+B 前往当前光标所在方法/变量的接口或定义处 （等效于ctrl+左键单击） ctrl+/ 注释光标所在行代码 ctrl+F1 到光标所在错误代码处显示错误信息 ctrl+space 基础代码补全 ctrl+F9 make project ALT ALT+回车 快速修复选择 ALT+Insert 代码自动生成 如：getter/setter toString() 构造器 ALT+F7 查看所选方法/变量/类被调用的位置 Ctrl+Alt Ctrl+Alt+S 打开IDEA设置 Ctrl+Alt+左方向键 返回上一个操作的位置 Ctrl+Alt+右方向键 前进到上一个操作的位置 Ctrl+Shift Ctrl+Shift +F 根据输入内容查找整个项目或指定目录的文件 Ctrl+Shift+Z 取消撤销 Ctrl+Shift+/ 代码块注释 Ctrl+Shift+F7 高亮显示所选代码（按ESC结束） Ctrl+Shift+Enter 自动结束代码，行末自动加分号 Ctrl+Shift+左键单击 把光标放在某个类变量上，按此快捷键后跳转到该类中 Ctrl+Shift+前方向键 将该方法移到上一个方法前面 Ctrl+Shift+后方向键 将该方法移到下一个方法后面 Ctrl +Shift+Alt Ctrl +Shift+Alt+V 无格式黏贴 其他 F11添加书签 F12 回到前一个工具窗口","categories":[],"tags":[]},{"title":"Enum 和 EnumSet， EnumMap及其特性","slug":"Enum，EnumSet和EnumMap","date":"2020-06-01T12:04:25.041Z","updated":"2020-06-01T12:19:43.879Z","comments":true,"path":"2020/06/01/Enum，EnumSet和EnumMap/","link":"","permalink":"http://lee-creator.github.io/2020/06/01/Enum%EF%BC%8CEnumSet%E5%92%8CEnumMap/","excerpt":"本文介绍了Enum 和 EnumSet， EnumMap的特性和一些实际应用。","text":"本文介绍了Enum 和 EnumSet， EnumMap的特性和一些实际应用。 枚举类 （Enum) 枚举类的对象是有限且固定的 枚举类的构造器一定是private（即无法从外部调用构造器，只在构造枚举值时调用） 构造器一般用来初始化定义和重写成员方法 enum 实现了 Seriablizable和Comparable接口 非抽象枚举类无法派生子类，所有枚举值都是public static final 的（需要在枚举类的第一行给出） 常用方法 int CompareTo(E o) 返回两对象的顺序：如果该枚举对象位于指定枚举对象之后，则返回正整数；反之返回负整数；否则返回零； String name() 返回枚举值的本名（括号外的名字）不会因toSting的改变而改变； static E values() 返回一个包含所有枚举值的数组方便遍历 String toString() int ordinal() 返回枚举值的索引值(从0开始) static valueOf(Class enumType, String name) 注意：name必须是枚举值的字面值，与toString方法无关 boolean equals（） 不重写是等于==用法： 在switch中用枚举类型 123456789public int getDeliveryTimeInDays() &#123; switch (status) &#123; case ORDERED: return 5; case READY: return 2; case DELIVERED: return 0; &#125; &#125; 枚举类强大的属性，方法和构造器12345678910111213141516171819202122232425262728293031323334353637 public class Demo1 &#123;private stage s;public enum stage&#123; GOOD(0)&#123; @Override public boolean getBoolean() &#123; // TODO Auto-generated method stub return true; &#125; &#125;, BAD(1) &#123; @Override public boolean getBoolean() &#123; // TODO Auto-generated method stub return false; &#125; &#125;; stage(int a)&#123; num=a; &#125; private int num; public abstract boolean getBoolean(); public int getNum() &#123; return num; &#125;&#125;public Demo1(String s) &#123; this.s=stage.valueOf(s);&#125;// Methods that set and get the status variable.public static void main(String[] args) &#123; System.out.println(new Demo1(\"GOOD\").getStage().getNum());&#125;&#125; EnumSet EnumSet 是一种专门为枚举类型所设计的 Set 类型。 与HashSet相比，由于使用了内部位向量表示，因此它是特定 Enum 常量集的非常有效且紧凑的表示形式。 它提供了类型安全的替代方法，以替代传统的基于int的“位标志”，使我们能够编写更易读和易于维护的简洁代码。 EnumSet 是抽象类，其有两个实现：RegularEnumSet 、JumboEnumSet，选择哪一个取决于实例化时枚举中常量的数量。 在很多场景中的枚举常量集合操作（如：取子集、增加、删除、containsAll和removeAll批操作）使用EnumSet非常合适；如果需要迭代所有可能的常量则使用Enum.values()。 EnumSet allOf(Class elementType): 创建一个包含指定枚举类里所有枚举值的EnumSet集合。 EnumSet complementOf(EnumSet e): 创建一个其元素类型与指定EnumSet里元素类型相同的EnumSet集合，新EnumSet集合包含原EnumSet集合所不包含的、此类枚举类剩下的枚举值。 （即新EnumSet集合和原EnumSet集合的集合元素加起来是该枚举类的所有枚举值）。 EnumSet copyOf(Collection c): 使用一个普通集合来创建EnumSet集合。 EnumSet copyOf(EnumSet e): 创建一个指定EnumSet具有相同元素类型、相同集合元素的EnumSet集合。 EnumSet noneOf(Class elementType): 创建一个元素类型为指定枚举类型的空EnumSet。 EnumSet of(E first,E…rest): 创建一个包含一个或多个枚举值的EnumSet集合，传入的多个枚举值必须属于同一个枚举类。 EnumSet range(E from,E to): 创建一个包含从from枚举值到to枚举值范围内所有枚举值的EnumSet集合。 1234567891011121314151617181920public class Demo1 &#123; private status s; private static EnumSet&lt;status&gt; badOnes&#x3D;EnumSet.of(status.bad); public enum status&#123; ... ... &#125; public Demo1(String s) &#123; this.s&#x3D;status.valueOf(s); &#125; public static List&lt;Demo1&gt; getAllBadOnes(List&lt;Demo1&gt; input) &#123; return input.stream().filter( (s) -&gt; badOnes.contains(s.getStatus())) .collect(Collectors.toList()); &#125; &#x2F;&#x2F; Methods that set and get the status variable. public static void main(String[] args) &#123; System.out.println(new Demo1(&quot;GOOD&quot;).getStatus().getNum()); &#125;&#125; 上述的代码可以将不同的Demo1的LIst中的bad Demo清除并返回全是good的Demo1 list EnumMap EnumMap是一个专门化的映射实现，用于将枚举常量用作键。与对应的 HashMap 相比，它是一个高效紧凑的实现，并且在内部表示为一个数组: 1234567891011121314 public static EnumMap&lt;status,List&lt;Demo1&gt;&gt; getAllkindsOfDemo1(List&lt;Demo1&gt; ls)&#123; EnumMap &lt;status,List&lt;Demo1&gt;&gt;de&#x3D;new EnumMap&lt;status,List&lt;Demo1&gt;&gt;(status.class); for(Demo1 s: ls) &#123; status sta&#x3D;s.getStatus(); if(de.containsKey(sta)) &#123; de.get(sta).add(s); &#125;else &#123; List&lt;Demo1&gt; n&#x3D;new ArrayList&lt;&gt;(); n.add(s); de.put(sta, n); &#125; &#125; return de;&#125; 上面的方法将输入的demo list 按照status分类并通过EnumMap 输出；很强大","categories":[],"tags":[]},{"title":"第一篇文章","slug":"第一篇文章","date":"2020-05-29T13:37:15.877Z","updated":"2020-06-15T07:14:49.246Z","comments":true,"path":"2020/05/29/第一篇文章/","link":"","permalink":"http://lee-creator.github.io/2020/05/29/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/","excerpt":"","text":"title: 第一篇文章date: 2020-05-29 21:37:15 #新的开始 希望我的blog越来越好，哈哈","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-05-29T12:47:27.508Z","updated":"2020-05-29T12:47:27.508Z","comments":true,"path":"2020/05/29/hello-world/","link":"","permalink":"http://lee-creator.github.io/2020/05/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}